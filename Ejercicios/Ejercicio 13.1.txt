local  NewDicc Put Get ContarLetras ContarLetras Split MergeSort FlattenTree TuplaMenor Tuplas in
   fun {NewDicc}
      nil
   end

   fun {Put Dicc K V}
      case Dicc
      of tree(K1 V1 L1 R1) andthen K1==K then
	 tree(K1 V L1 R1)
      [] tree(K1 V1 L1 R1) andthen K<K1 then
	 tree(K1 V1 {Put L1 K V} R1)
      [] tree(K1 V1 L1 R1) andthen K1<K then
	 tree(K1 V1 L1 {Put R1 K V})
      else
	 tree(K V nil nil)
      end
   end

   fun {Get Dicc K}
      case Dicc
      of tree(K1 V1 L1 R1) andthen K1==K then
	 V1
      [] tree(K1 V1 L1 R1) andthen K<K1 then
	 {Get L1 K}
      [] tree(K1 V1 L1 R1) andthen K1<K then
	 {Get R1 K}
     else
	 nil
      end
   end

   fun {ContarLetras S Dicc}
      case S of H|T then
	 local Prev Dicc2 in
	    Prev = {Get Dicc H}
	    if Prev == nil then
	       Dicc2 = {Put Dicc H 1}
	    else
	       Dicc2 = {Put Dicc H Prev+1}
	    end
	    {ContarLetras T Dicc2}
	 end
      [] H|nil then
	 local Prev in
	    Prev = {Get Dicc H}
	    if Prev == nil then
	       {Put Dicc H 1}
	    else
	       {Put Dicc H Prev+1}	       
	    end
	 end
      else
	 Dicc
      end
   end

   fun {Merge A B LessThan}
      if A \= nil andthen B \= nil then
	 if {LessThan A.1 B.1} then
	    A.1|{Merge A.2 B LessThan}
	 else
	    B.1|{Merge A B.2 LessThan}
	 end
      elseif A\=nil then /*B esta vacia*/
	 A.1|{Merge A.2 B LessThan}
      elseif B\=nil then /*A esta vacia*/
	 B.1|{Merge A B.2 LessThan}
      else /*Caso base*/
	 nil
      end
   end

   proc {Split L R1 R2}
      case L of
	 H1|H2|T then
	 local X Y in
	    R1 = H1|X
	    R2 = H2|Y
	    {Split T X Y}
	 end
      else
	 R1 = L|nil
	 R2 = nil
      end
   end

   fun {MergeSort List LessThan}
      case List of
	 nil then List
      [] [H] then List
      else
	 local R1 R2 in
	    {Split List R1 R2}
	    {Merge {MergeSort R1 LessThan} {MergeSort R2 LessThan} LessThan}
	 end
      end
   end
   
   fun {FlattenTree Tree}
      case Tree
      of tree(K1 V1 nil nil) then
	 pair(K1 V1)
      [] tree(K1 V1 L1 nil) then
	 {FlattenTree L1}|pair(K1 V1)
      [] tree(K1 V1 nil R1) then
	 pair(K1 V1)|{FlattenTree R1}
      [] tree(K1 V1 L1 R1) then
	 {FlattenTree L1}|pair(K1 V1)|{FlattenTree R1}
      else nil
      end
   end

   fun {TuplaMenor A B}
      if A.2 == B.2 then
	 A.1 < B.1
      else
	 A.2 < B.2
      end
   end

   Tuplas = {FlattenTree {ContarLetras ['B' 'B' 'A' 'C' 'D' 'A' 'K'] {NewDicc}}}

   {Browse Tuplas}

   {Browse {MergeSort Tuplas TuplaMenor}}

end